APP.PY


from flask import Flask, render_template, request, jsonify
import os
from werkzeug.utils import secure_filename  # Added for secure filename handling
from malware import scan_file, scan_directory, handle_threat, \
    execute_threat_action  # Import the missing handle_threat

app = Flask(__name__)

# Route for the main page
@app.route('/')
def index():
    return render_template('index.html')

# Route to handle analysis
@app.route('/analyze', methods=['POST'])
def analyze():
    output = "[INFO] Starting analysis...\n"
    threats = []  # Collect threats for UI handling

    # Handle file upload
    if 'file' in request.files and request.files['file'].filename != '':
        file = request.files['file']
        # Sanitize the filename to prevent path traversal attacks
        filename = secure_filename(file.filename)
        file_path = os.path.join("uploads", filename)

        # Create uploads directory if it doesn't exist
        if not os.path.exists("uploads"):
            os.makedirs("uploads")

        file.save(file_path)
        output += f"[INFO] File uploaded: {file_path}\n"

        # Run the scan with error handling and cleanup
        try:
            result = scan_file(file_path)
            if result:
                output += format_result(result, threats)
            else:
                output += "[ERROR] Failed to scan the file.\n"
        except Exception as e:
            output += f"[ERROR] An error occurred while scanning the file: {str(e)}\n"
        finally:
            # Ensure the file is always deleted, even if an error occurs
            try:
                os.remove(file_path)
                output += f"[INFO] Cleaned up: {file_path}\n"
            except Exception as e:
                output += f"[ERROR] Failed to clean up file {file_path}: {str(e)}\n"

    # Handle directory scan
    elif request.form.get('directory'):
        dir_path = request.form['directory']
        if not os.path.isdir(dir_path):
            output += f"[ERROR] Invalid directory: {dir_path}\n"
        else:
            output += f"[INFO] Scanning directory: {dir_path}\n"
            results = scan_directory(dir_path)
            if results:
                for result in results:
                    output += format_result(result, threats)
            else:
                output += "[INFO] No files found to scan.\n"

    # Handle URL input
    elif request.form.get('url'):
        url = request.form['url']
        output += f"[INFO] URL analysis not implemented yet: {url}\n"
        # Add URL scanning logic here if needed

    # Handle hash input
    elif request.form.get('hash'):
        file_hash = request.form['hash']
        output += f"[INFO] Hash analysis not implemented yet: {file_hash}\n"
        # Add hash-based scanning logic here if needed

    else:
        output += "[ERROR] No input provided.\n"

    return jsonify({'output': output, 'threats': threats})

# Route to handle threat actions
@app.route('/handle_threat', methods=['POST'])
def handle_threat_action():
    data = request.json
    file_path = data.get('file_path')
    action = data.get('action')

    if not file_path or not action:
        return jsonify({'output': '[ERROR] Invalid request.'})

    result = execute_threat_action(file_path, action)
    return jsonify({'output': result})

# Helper function to format scan results for display
def format_result(result, threats):
    output = ""
    hash_display = f"MD5: {result['md5_hash']}, SHA256: {result['sha256_hash']}"
    heuristic_display = f"Heuristic Score: {result['heuristic_score']}"
    if result["heuristics"]:
        heuristic_display += f" ({', '.join(f'{k}: {v}' for k, v in result['heuristics'].items())})"

    vt_display = ""
    if result["vt_result"]:
        vt = result["vt_result"]
        vt_display = f"VirusTotal: {vt['malicious']} malicious, {vt['suspicious']} suspicious, {vt['harmless']} harmless, {vt['undetected']} undetected"
        if vt["vt_link"]:
            vt_display += f" (Link: {vt['vt_link']})"

    if result["is_malware"]:
        output += f"[ALERT] {result['path']} matches a known malware signature ({hash_display})! {heuristic_display} | {vt_display}\n"
        threat = handle_threat(result['path'], result['is_malware'], result['heuristic_score'])
        threats.append(threat)
    elif result["heuristic_score"] > 5:
        output += f"[WARNING] {result['path']} is potentially malicious ({heuristic_display}) ({hash_display}) | {vt_display}\n"
        threat = handle_threat(result['path'], result['is_malware'], result['heuristic_score'])
        threats.append(threat)
    else:
        output += f"[INFO] {result['path']} appears clean ({heuristic_display}) ({hash_display}) | {vt_display}\n"

    return output

if __name__ == '__main__':
    app.run(debug=True)



















MALWARE.PY




import hashlib
import os
import re
import shutil
import time
import requests
from colorama import init, Fore, Style
from functools import lru_cache

init()
import csv
import pefile
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# Replace with your VirusTotal API key
VIRUSTOTAL_API_KEY = "0a69aa4f1842878a68d9379c51e3aa42ab61e7c1b65bdd94b1071942111a29ce"


def load_malware_hashes(csv_path="full.csv"):
    malware_hashes = set()
    default_hashes = {
        "d41d8cd98f00b204e9800998ecf8427e",  # Empty file MD5 (example)
        "e80b5017098950fc58aad83c8c14978e"  # Common test hash
    }

    try:
        with open(csv_path, "r", encoding="utf-8") as f:
            reader = csv.reader(f)
            for row in reader:
                if not row or row[0].startswith("#"):
                    continue
                else:
                    break
            expected_columns = 15
            for i, row in enumerate(reader, start=1):
                if not row or len(row) < 3:
                    print(
                        f"{Fore.YELLOW}Warning: Skipping malformed row {i} in {csv_path} (too few columns).{Style.RESET_ALL}")
                    continue
                md5_hash = row[2].strip().lower() if len(row) > 2 else ""
                sha256_hash = row[1].strip().lower() if len(row) > 1 else ""
                if len(row) < expected_columns and len(row) >= 3:
                    print(
                        f"{Fore.YELLOW}Warning: Row {i} in {csv_path} has {len(row)} columns, expected {expected_columns}.{Style.RESET_ALL}")
                if md5_hash:
                    malware_hashes.add(md5_hash)
                if sha256_hash:
                    malware_hashes.add(sha256_hash)

        if malware_hashes:
            print(
                f"{Fore.GREEN}{len(malware_hashes)} malware hashes (MD5 and SHA256) loaded successfully from {csv_path}!{Style.RESET_ALL}")
        else:
            print(f"{Fore.YELLOW}No valid hashes found in {csv_path}. Using default hash set.{Style.RESET_ALL}")
            malware_hashes = default_hashes

    except FileNotFoundError:
        print(f"{Fore.RED}Error: Malware hash file '{csv_path}' not found. Using default hash set.{Style.RESET_ALL}")
        malware_hashes = default_hashes
        response = input(f"Download a hash database? (y/n): ").lower()
        if response == 'y':
            print(
                f"{Fore.CYAN}Please manually download from https://bazaar.abuse.ch/export/ and save as 'full.csv'.{Style.RESET_ALL}")
    except Exception as e:
        print(f"{Fore.RED}Error loading hashes: {e}. Using default hash set.{Style.RESET_ALL}")
        malware_hashes = default_hashes

    return malware_hashes


MALWARE_HASHES = load_malware_hashes()

# Suspicious patterns for text-based analysis
SUSPICIOUS_PATTERNS = {
    "http://": {"weight": 1, "desc": "URL"},
    "https://": {"weight": 1, "desc": "Secure URL"},
    "HKEY_": {"weight": 3, "desc": "Registry key"},
    "virus": {"weight": 2, "desc": "Virus reference"},
    "malware": {"weight": 2, "desc": "Malware reference"},
    "trojan": {"weight": 3, "desc": "Trojan reference"},
    "exploit": {"weight": 3, "desc": "Exploit reference"},
    r"powershell": {"weight": 4, "desc": "PowerShell command"},
    r"cmd\.exe": {"weight": 4, "desc": "Command Prompt execution"},
    r"eval\(": {"weight": 5, "desc": "Code evaluation"},
    r"(?:[A-Za-z0-9+/]{4}){10,}={0,2}": {"weight": 5, "desc": "Base64 encoded string"},
}

# Suspicious PE imports with weights
SUSPICIOUS_IMPORTS = {
    "CreateProcessA": {"weight": 4, "desc": "Process creation"},
    "CreateProcessW": {"weight": 4, "desc": "Process creation (wide)"},
    "WriteProcessMemory": {"weight": 5, "desc": "Memory injection"},
    "VirtualAlloc": {"weight": 4, "desc": "Memory allocation"},
    "InternetOpenA": {"weight": 3, "desc": "Network access"},
    "InternetOpenW": {"weight": 3, "desc": "Network access (wide)"},
    "ShellExecuteA": {"weight": 4, "desc": "Shell execution"},
    "ShellExecuteW": {"weight": 4, "desc": "Shell execution (wide)"},
}

# Risky file extensions for context
RISKY_EXTENSIONS = {".bat", ".cmd", ".exe", ".ps1", ".vbs", ".js", ".dll"}

# Quarantine directory
QUARANTINE_DIR = os.path.join(os.getcwd(), "quarantine")


def calculate_hash(file_path, hash_type="md5"):
    if hash_type == "md5":
        hasher = hashlib.md5()
    elif hash_type == "sha256":
        hasher = hashlib.sha256()
    else:
        raise ValueError("Unsupported hash type")
    try:
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hasher.update(chunk)
        return hasher.hexdigest()
    except Exception as e:
        print(f"{Fore.RED}Error reading {file_path}: {e}{Style.RESET_ALL}")
        return None


@lru_cache(maxsize=1000)  # Cache results for up to 1000 unique hashes
def check_virustotal(hash_value):
    """Query VirusTotal for hash information with rate limiting."""
    url = "https://www.virustotal.com/api/v3/files/" + hash_value
    headers = {
        "x-apikey": VIRUSTOTAL_API_KEY
    }
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            stats = data["data"]["attributes"]["last_analysis_stats"]
            return {
                "malicious": stats.get("malicious", 0),
                "suspicious": stats.get("suspicious", 0),
                "undetected": stats.get("undetected", 0),
                "harmless": stats.get("harmless", 0),
                "vt_link": f"https://www.virustotal.com/gui/file/{hash_value}"
            }
        elif response.status_code == 404:
            return {"malicious": 0, "suspicious": 0, "undetected": 0, "harmless": 0, "vt_link": None}
        elif response.status_code == 429:  # Rate limit exceeded
            print(f"{Fore.YELLOW}VirusTotal rate limit exceeded. Sleeping for 60 seconds...{Style.RESET_ALL}")
            time.sleep(60)  # Wait 60 seconds before retrying
            return check_virustotal(hash_value)  # Retry
        else:
            print(f"{Fore.YELLOW}VirusTotal API error: {response.status_code} - {response.text}{Style.RESET_ALL}")
            return None
    except Exception as e:
        print(f"{Fore.RED}Error querying VirusTotal: {e}{Style.RESET_ALL}")
        return None


def scan_pe_imports(file_path):
    try:
        pe = pefile.PE(file_path)
        findings = {}
        total_score = 0

        if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                for imp in entry.imports:
                    if imp.name:
                        import_name = imp.name.decode('utf-8', errors='ignore')
                        if import_name in SUSPICIOUS_IMPORTS:
                            weight = SUSPICIOUS_IMPORTS[import_name]["weight"]
                            desc = SUSPICIOUS_IMPORTS[import_name]["desc"]
                            findings[desc] = weight
                            total_score += weight
        return {"findings": findings, "score": total_score}
    except pefile.PEFormatError:
        return {"findings": {}, "score": 0}  # Not a PE file
    except Exception as e:
        print(f"{Fore.YELLOW}Warning: Could not analyze PE imports for {file_path}: {e}{Style.RESET_ALL}")
        return {"findings": {}, "score": 0}


def scan_strings(file_path):
    try:
        with open(file_path, "rb") as f:
            content = f.read().decode("utf-8", errors="ignore").lower()

        _, ext = os.path.splitext(file_path)
        is_risky = ext.lower() in RISKY_EXTENSIONS

        findings = {}
        total_score = 0

        for pattern, info in SUSPICIOUS_PATTERNS.items():
            weight = info["weight"]
            desc = info["desc"]
            if is_risky and pattern in {"http://", "https://", "virus", "malware"}:
                weight += 2

            if pattern.startswith(r"(?:") or pattern.startswith(r"["):
                if re.search(pattern, content):
                    findings[desc] = weight
                    total_score += weight
            else:
                if pattern in content:
                    findings[desc] = weight
                    total_score += weight

        return {"findings": findings, "score": total_score}
    except Exception:
        return {"findings": {}, "score": 0}


def scan_file(file_path):
    try:
        md5_hash = calculate_hash(file_path, "md5")
        sha256_hash = calculate_hash(file_path, "sha256")
    except Exception as e:
        print(f"{Fore.RED}Error calculating hashes for {file_path}: {e}{Style.RESET_ALL}")
        return None

    try:
        heuristic_result = scan_strings(file_path)
    except Exception as e:
        print(f"{Fore.YELLOW}Warning: Could not scan strings for {file_path}: {e}{Style.RESET_ALL}")
        heuristic_result = {"findings": {}, "score": 0}

    try:
        pe_result = scan_pe_imports(file_path) if file_path.lower().endswith((".exe", ".dll")) else {"findings": {}, "score": 0}
    except Exception as e:
        print(f"{Fore.YELLOW}Warning: Could not scan PE imports for {file_path}: {e}{Style.RESET_ALL}")
        pe_result = {"findings": {}, "score": 0}

    combined_findings = {**heuristic_result["findings"], **pe_result["findings"]}
    combined_score = heuristic_result["score"] + pe_result["score"]

    # Check VirusTotal for additional verification
    vt_result = check_virustotal(sha256_hash) if sha256_hash else None

    result = {
        "path": file_path,
        "md5_hash": md5_hash,
        "sha256_hash": sha256_hash,
        "is_malware": False,
        "heuristics": combined_findings,
        "heuristic_score": combined_score,
        "vt_result": vt_result
    }
    if (md5_hash and md5_hash in MALWARE_HASHES) or (sha256_hash and sha256_hash in MALWARE_HASHES):
        result["is_malware"] = True
    if vt_result and (vt_result["malicious"] > 0 or vt_result["suspicious"] > 0):
        result["is_malware"] = True  # Mark as malware if VirusTotal flags it
    return result if md5_hash or sha256_hash else None

def scan_directory(directory):
    results = []
    for root, _, files in os.walk(directory):
        for file_name in files:
            file_path = os.path.join(root, file_name)
            result = scan_file(file_path)
            if result:
                results.append(result)
    return results

def handle_threat(file_path, is_malware, heuristic_score):
    """Return threat details for the UI to handle."""
    if not os.path.exists(QUARANTINE_DIR):
        os.makedirs(QUARANTINE_DIR)

    # Instead of prompting, return the threat details for the UI to handle
    return {
        "file_path": file_path,
        "is_malware": is_malware,
        "heuristic_score": heuristic_score,
        "action_taken": None  # Action will be set by the UI
    }

def execute_threat_action(file_path, action):
    """Execute the chosen action on the file."""
    if action == 'delete':
        try:
            os.remove(file_path)
            return f"[INFO] Deleted {file_path}"
        except Exception as e:
            return f"[ERROR] Error deleting {file_path}: {e}"
    elif action == 'quarantine':
        try:
            dest_path = os.path.join(QUARANTINE_DIR, os.path.basename(file_path))
            shutil.move(file_path, dest_path)
            return f"[INFO] Moved {file_path} to quarantine at {dest_path}"
        except Exception as e:
            return f"[ERROR] Error quarantining {file_path}: {e}"
    else:
        return f"[INFO] Skipped action on {file_path}"


def print_results(results):
    scanned = len(results)
    infected = sum(1 for r in results if r["is_malware"] or r["heuristic_score"] > 5)
    actions_taken = 0

    for r in results:
        hash_display = f"MD5: {r['md5_hash']}, SHA256: {r['sha256_hash']}"
        heuristic_display = f"Heuristic Score: {r['heuristic_score']}"
        if r["heuristics"]:
            heuristic_display += f" ({', '.join(f'{k}: {v}' for k, v in r['heuristics'].items())})"

        vt_display = ""
        if r["vt_result"]:
            vt = r["vt_result"]
            vt_display = f"VirusTotal: {vt['malicious']} malicious, {vt['suspicious']} suspicious, {vt['harmless']} harmless, {vt['undetected']} undetected"
            if vt["vt_link"]:
                vt_display += f" (Link: {vt['vt_link']})"

        if r["is_malware"]:
            print(
                f"{Fore.RED}ALERT: {r['path']} matches a known malware signature ({hash_display})! {heuristic_display} | {vt_display}{Style.RESET_ALL}")
            if handle_threat(r["path"], r["is_malware"], r["heuristic_score"]):
                actions_taken += 1
        elif r["heuristic_score"] > 5:
            print(
                f"{Fore.YELLOW}WARNING: {r['path']} is potentially malicious ({heuristic_display}) ({hash_display}) | {vt_display}{Style.RESET_ALL}")
            if handle_threat(r["path"], r["is_malware"], r["heuristic_score"]):
                actions_taken += 1
        else:
            print(
                f"{Fore.GREEN}{r['path']} appears clean ({heuristic_display}) ({hash_display}) | {vt_display}{Style.RESET_ALL}")

    print(
        f"\n{Fore.CYAN}Scan complete: {scanned} files scanned, {infected} potential threats found, {actions_taken} actions taken.{Style.RESET_ALL}")


class FileMonitorHandler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            file_path = event.src_path
            print(f"{Fore.BLUE}New file detected: {file_path}{Style.RESET_ALL}")
            result = scan_file(file_path)
            if result:
                print_results([result])

    def on_modified(self, event):
        if not event.is_directory:
            file_path = event.src_path
            print(f"{Fore.BLUE}File modified: {file_path}{Style.RESET_ALL}")
            result = scan_file(file_path)
            if result:
                print_results([result])


def start_real_time_monitoring(directory):
    if not os.path.isdir(directory):
        print(f"{Fore.RED}Error: '{directory}' is not a valid directory.{Style.RESET_ALL}")
        return

    event_handler = FileMonitorHandler()
    observer = Observer()
    observer.schedule(event_handler, directory, recursive=True)
    observer.start()
    print(f"{Fore.GREEN}Started real-time monitoring on {directory}. Press Ctrl+C to stop.{Style.RESET_ALL}")

    try:
        while observer.is_alive():
            time.sleep(1)  # Simplified loop for better interrupt handling
    except KeyboardInterrupt:
        print(f"{Fore.YELLOW}Received Ctrl+C, stopping observer...{Style.RESET_ALL}")
        observer.stop()
    observer.join()
    print(f"{Fore.CYAN}Real-time monitoring stopped.{Style.RESET_ALL}")


def scheduled_scan(directory, interval_seconds=60):
    if not os.path.isdir(directory):
        print(f"{Fore.RED}Error: '{directory}' is not a valid directory.{Style.RESET_ALL}")
        return

    print(
        f"{Fore.GREEN}Started scheduled scanning on {directory} every {interval_seconds} seconds. Press Ctrl+C to stop.{Style.RESET_ALL}")
    try:
        while True:
            results = scan_directory(directory)
            print_results(results)
            time.sleep(interval_seconds)
    except KeyboardInterrupt:
        print(f"{Fore.CYAN}Stopped scheduled scanning.{Style.RESET_ALL}")
















INDEX.PY




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Malware Detection</title>
    <!--    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">-->

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: #f5f5f5;
            color: #333;
        }

        header {
            background-color: #2c3e50;
            padding: 20px;
            text-align: center;
        }

        header h1 {
            color: #fff;
            font-size: 2em;
            margin-bottom: 10px;
        }

        header nav a {
            color: #ecf0f1;
            text-decoration: none;
            margin: 0 15px;
            font-size: 1.1em;
        }

        header nav a:hover {
            text-decoration: underline;
        }

        main {
            padding: 20px;
        }

        .analysis-tool h2,
        .recent-results h2 {
            font-size: 1.8em;
            margin-bottom: 20px;
        }

        .tool-container {
            display: flex;
            gap: 20px;
            margin-bottom: 40px;
        }

        .input-section,
        .output-section {
            flex: 1;
        }

        .input-section {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .input-section div {
            margin-bottom: 20px;
        }

        .input-section label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .input-section input[type="file"],
        .input-section input[type="text"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .input-section p {
            color: #666;
            font-size: 0.9em;
            margin-top: 5px;
        }

        .input-section button {
            background-color: #e74c3c;
            color: #fff;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
            font-size: 1.1em;
        }

        .input-section button:hover {
            background-color: #c0392b;
        }

        /* Style for the Clear button */
        .input-section button#clearBtn {
            background-color: #7f8c8d; /* Gray color */
            color: #fff;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
            font-size: 1.1em;
        }

        .input-section button#clearBtn:hover {
            background-color: #6c757d; /* Slightly darker gray on hover */
        }

        .output-section {
            background-color: #2c3e50;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .output-section pre {
            color: #2ecc71;
            font-family: 'Courier New', Courier, monospace;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        .recent-results {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .threat-action {
            margin-top: 10px;
            padding: 10px;
            background-color: #34495e;
            border-radius: 4px;
        }

        .threat-action p {
            color: #e74c3c;
            margin-bottom: 5px;
        }

        .threat-action button {
            margin-right: 5px;
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .threat-action button:nth-child(2) {
            background-color: #e74c3c;
            color: #fff;
        }

        .threat-action button:nth-child(3) {
            background-color: #f39c12;
            color: #fff;
        }

        .threat-action button:nth-child(4) {
            background-color: #7f8c8d;
            color: #fff;
        }

        .threat-action button:hover {
            opacity: 0.9;
        }
    </style>
</head>
<body>
    <header>
        <h1>Welcome to Our Malware Detection Website</h1>
        <nav>
            <a href="#">Detection by ML</a>
            <a href="#">Dynamic-Analysis</a>
            <a href="#">Awareness</a>
            <a href="#">About</a>
        </nav>
    </header>

    <main>
        <section class="analysis-tool">
            <h2>Malware Analysis Tool</h2>
            <div class="tool-container">
                <div class="input-section">
                    <div class="file-upload">
                        <label>File Upload</label>
                        <input type="file" id="fileInput" name="file">
                        <p id="fileStatus">No file selected.</p>
                    </div>
                    <div class="directory-scan">
                        <label>Directory Scan</label>
                        <input type="text" id="directoryInput" name="directory" placeholder="Enter Directory Path (e.g., C:\Desktop\IS)">
                    </div>
                    <div class="url-analysis">
                        <label>URL Analysis</label>
                        <input type="text" id="urlInput" name="url" placeholder="Enter URL">
                    </div>
                    <div class="hash-file">
                        <label>Hash File</label>
                        <input type="text" id="hashInput" name="hash" placeholder="Enter File Hash">
                    </div>
                    <div style="display: flex; gap: 10px;">
                        <button id="analyzeBtn">Analyze</button>
                        <button id="clearBtn" type="button">Clear</button>
                    </div>
                </div>
                <div class="output-section">
                    <pre id="output">[INFO] Waiting for input...</pre>
                    <div id="threatActions"></div>
                </div>
            </div>
        </section>

        <section class="recent-results">
            <h2>Recent Analysis Results</h2>
            <!-- Add dynamic content here if needed -->
        </section>
    </main>

    <script>
        // Update file status when a file is selected
        document.getElementById('fileInput').addEventListener('change', function() {
            const fileStatus = document.getElementById('fileStatus');
            if (this.files.length > 0) {
                fileStatus.textContent = this.files[0].name;
            } else {
                fileStatus.textContent = 'No file selected.';
            }
        });

        // Handle the analyze button click
        document.getElementById('analyzeBtn').addEventListener('click', function() {
            const fileInput = document.getElementById('fileInput');
            const directoryInput = document.getElementById('directoryInput').value;
            const urlInput = document.getElementById('urlInput').value;
            const hashInput = document.getElementById('hashInput').value;
            const output = document.getElementById('output');
            const threatActions = document.getElementById('threatActions');

            const formData = new FormData();
            if (fileInput.files.length > 0) {
                formData.append('file', fileInput.files[0]);
            }
            if (directoryInput) {
                formData.append('directory', directoryInput);
            }
            if (urlInput) {
                formData.append('url', urlInput);
            }
            if (hashInput) {
                formData.append('hash', hashInput);
            }

            output.textContent = '[INFO] Analyzing...'; // Clear previous output
            threatActions.innerHTML = ''; // Clear previous actions

            fetch('/analyze', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                output.textContent = data.output;
                if (data.threats && data.threats.length > 0) {
                    data.threats.forEach((threat, index) => {
                        const threatDiv = document.createElement('div');
                        threatDiv.className = 'threat-action';
                        threatDiv.setAttribute('data-filepath', threat.file_path); // Store file_path as a data attribute
                        threatDiv.innerHTML = `
                            <p>Threat detected at ${threat.file_path}</p>
                            <button onclick="handleThreat(${index}, 'delete')">Delete</button>
                            <button onclick="handleThreat(${index}, 'quarantine')">Quarantine</button>
                            <button onclick="handleThreat(${index}, 'skip')">Skip</button>
                        `;
                        threatActions.appendChild(threatDiv);
                    });
                }
            })
            .catch(error => {
                output.textContent = '[ERROR] Failed to analyze: ' + error;
            });
        });

        // Handle the clear button click
        document.getElementById('clearBtn').addEventListener('click', function() {
            // Reset file input
            const fileInput = document.getElementById('fileInput');
            fileInput.value = ''; // Clear the selected file
            document.getElementById('fileStatus').textContent = 'No file selected.';

            // Reset text inputs
            document.getElementById('directoryInput').value = '';
            document.getElementById('urlInput').value = '';
            document.getElementById('hashInput').value = '';

            // Clear output and threat actions
            document.getElementById('output').textContent = '[INFO] Waiting for input...';
            document.getElementById('threatActions').innerHTML = '';
        });

        function handleThreat(index, action) {
            const output = document.getElementById('output');
            const threatDiv = document.getElementsByClassName('threat-action')[index];
            const filePath = threatDiv.getAttribute('data-filepath'); // Use data attribute

            // Provide immediate feedback
            threatDiv.style.backgroundColor = '#7f8c8d'; // Gray out the div while processing
            threatDiv.querySelectorAll('button').forEach(btn => btn.disabled = true); // Disable buttons

            fetch('/handle_threat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ file_path: filePath, action: action })
            })
            .then(response => response.json())
            .then(data => {
                output.textContent += '\n' + data.output;
                threatDiv.remove(); // Remove the action buttons after handling
                // Scroll to the latest output
                output.scrollTop = output.scrollHeight;
            })
            .catch(error => {
                output.textContent += '\n[ERROR] Failed to handle threat: ' + error;
                threatDiv.style.backgroundColor = '#e74c3c'; // Red background on error
                threatDiv.querySelectorAll('button').forEach(btn => btn.disabled = false); // Re-enable buttons
            });
        }
    </script>
</body>
</html>